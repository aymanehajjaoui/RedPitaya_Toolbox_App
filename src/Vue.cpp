/* Vue.cpp */

#include "Vue.hpp"

Vue::Vue()
    : buttonBrowseModel("Browse model generated by Qualia"),
      buttonExportLocally("Export locally"),
      buttonConnectRedPitaya("Connect to RedPitaya"),
      buttonShowMetrics("Show Metrics"),
      buttonExportToRedPitaya("Export to RedPitaya"),
      cancelExportButton("Cancel Export"),
      buttonHelp("Help"),
      buttonQuit("Quit"),
      mainBox(Gtk::ORIENTATION_VERTICAL),
      buttonRowBox(Gtk::ORIENTATION_HORIZONTAL),
      checkShowDetails("Show details"),
      modelLoaded(false),
      redpitayaConnected(false)
{
    set_title("RedPitaya Toolbox App");
    set_border_width(10);
    set_default_size(1, 1);

    buttonBrowseModel.signal_clicked().connect([this]()
                                               { BrowseModelHandler::handle(
                                                     this,
                                                     buttonBrowseModel,
                                                     buttonExportLocally,
                                                     buttonExportToRedPitaya,
                                                     detailsPanel,
                                                     modelFolder,
                                                     modelLoaded,
                                                     redpitayaConnected); });

    buttonExportLocally.signal_clicked().connect([this]()
                                                 { ExportLocalHandler::handle(
                                                       this,
                                                       buttonExportLocally,
                                                       cancelExportButton,
                                                       modelFolder,
                                                       cancelExportFlag,
                                                       detailsPanel); });

    buttonConnectRedPitaya.signal_clicked().connect([this]()
                                                    { ConnectRedPitayaHandler::handle(
                                                          this,
                                                          buttonConnectRedPitaya,
                                                          buttonExportToRedPitaya,
                                                          buttonShowMetrics,
                                                          detailsPanel,
                                                          redpitayaHost,
                                                          redpitayaPassword,
                                                          redpitayaPrivateKeyPath,
                                                          redpitayaConnected,
                                                          modelLoaded); });

    buttonShowMetrics.signal_clicked().connect([this]()
                                               { ShowMetricsHandler::handle(
                                                     this,
                                                     buttonShowMetrics,
                                                     buttonConnectRedPitaya,
                                                     redpitayaHost,
                                                     redpitayaPassword,
                                                     redpitayaPrivateKeyPath,
                                                     detailsPanel); });

    buttonExportToRedPitaya.signal_clicked().connect([this]()
                                                     { ExportToRedPitayaHandler::handle(
                                                           this,
                                                           buttonExportToRedPitaya,
                                                           buttonConnectRedPitaya,
                                                           cancelExportButton,
                                                           modelFolder,
                                                           redpitayaHost,
                                                           redpitayaPassword,
                                                           redpitayaPrivateKeyPath,
                                                           cancelExportFlag,
                                                           detailsPanel); });

    buttonHelp.signal_clicked().connect([this]()
                                        { HelpHandler::handle(this); });

    buttonQuit.signal_clicked().connect([this]()
                                        { QuitHandler::handle(this,
                                                              redpitayaHost,
                                                              redpitayaPassword,
                                                              redpitayaPrivateKeyPath); });

    cancelExportButton.signal_clicked().connect([this]()
                                                {
        cancelExportFlag = true;
        Glib::signal_idle().connect_once([this]() {
            detailsPanel.append_log("Export cancellation requested.");
            detailsPanel.set_status("Cancelling...");
        }); });

    buttonRowBox.pack_start(buttonBrowseModel, Gtk::PACK_SHRINK);
    buttonRowBox.pack_start(buttonExportLocally, Gtk::PACK_SHRINK);
    buttonRowBox.pack_start(buttonConnectRedPitaya, Gtk::PACK_SHRINK);
    buttonRowBox.pack_start(buttonExportToRedPitaya, Gtk::PACK_SHRINK);
    buttonRowBox.pack_start(cancelExportButton, Gtk::PACK_SHRINK);
    buttonRowBox.pack_start(buttonShowMetrics, Gtk::PACK_SHRINK);
    buttonRowBox.pack_start(buttonHelp, Gtk::PACK_SHRINK);
    buttonRowBox.pack_start(buttonQuit, Gtk::PACK_SHRINK);

    mainBox.pack_start(buttonRowBox, Gtk::PACK_SHRINK);
    mainBox.pack_start(checkShowDetails, Gtk::PACK_SHRINK);
    mainBox.pack_start(detailsPanel, Gtk::PACK_EXPAND_WIDGET);

    add(mainBox);
    show_all_children();

    detailsPanel.hide();
    checkShowDetails.set_active(false);

    buttonExportLocally.set_sensitive(false);
    buttonExportToRedPitaya.set_sensitive(false);
    cancelExportButton.set_sensitive(false);
    buttonShowMetrics.set_sensitive(false);

    checkShowDetails.signal_toggled().connect(sigc::mem_fun(*this, &Vue::onCheckShowDetailsClicked));
}

Vue::~Vue() {}

void Vue::onCheckShowDetailsClicked()
{
    bool show = checkShowDetails.get_active();
    if (show)
        detailsPanel.show();
    else
        detailsPanel.hide();

    resize(1, 1);
    queue_resize();
}
