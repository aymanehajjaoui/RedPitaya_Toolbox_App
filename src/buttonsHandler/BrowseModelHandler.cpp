/*BrowseModelHandler.cpp*/

#include "buttonsHandler/BrowseModelHandler.hpp"

namespace BrowseModelHandler
{
    void handle(Gtk::Window* parentWindow,
                Gtk::Button& buttonBrowseModel,
                Gtk::Button& buttonExportLocally,
                Gtk::Button& buttonExportToRedPitaya,
                DetailsPanel& detailsPanel,
                std::string& modelFolder,
                bool& modelLoaded,
                bool redpitayaConnected)
    {
        buttonBrowseModel.set_sensitive(false);

        auto dialog = new Gtk::FileChooserDialog("Choose the model folder", Gtk::FILE_CHOOSER_ACTION_SELECT_FOLDER);
        dialog->set_transient_for(*parentWindow);
        dialog->set_modal(true);
        dialog->set_resizable(true);
        dialog->set_position(Gtk::WIN_POS_CENTER);
        dialog->set_default_size(600, 400);
        dialog->add_button("_Cancel", Gtk::RESPONSE_CANCEL);
        dialog->add_button("_OK", Gtk::RESPONSE_OK);

        dialog->signal_response().connect([=, &buttonBrowseModel, &buttonExportLocally, &buttonExportToRedPitaya, &detailsPanel, &modelFolder, &modelLoaded, &redpitayaConnected](int response)
        {
            std::string folder = dialog->get_filename();

            dialog->hide();
            delete dialog;

            buttonBrowseModel.set_sensitive(true);

            if (response != Gtk::RESPONSE_OK || folder.empty())
                return;

            modelFolder = folder;
            std::cout << "Selected model folder: " << modelFolder << std::endl;

            detailsPanel.append_log("Selected model folder: " + modelFolder);
            detailsPanel.set_status("Checking model validity...");
            detailsPanel.set_progress(0.2);

            if (FileManager::isValidQualiaModel(modelFolder))
            {
                detailsPanel.append_log("Model folder is valid.");
                detailsPanel.set_status("Model loaded");
                detailsPanel.set_progress(1.0);

                modelLoaded = true;
                buttonExportLocally.set_sensitive(true);
                if (redpitayaConnected)
                    buttonExportToRedPitaya.set_sensitive(true);
            }
            else
            {
                detailsPanel.append_log("Invalid model folder structure.");
                detailsPanel.set_status("Invalid model folder");
                detailsPanel.set_progress(0.0);

                auto errorDialog = new Gtk::MessageDialog(*parentWindow,
                    "Model selected seems to not be generated by Qualia.",
                    false, Gtk::MESSAGE_ERROR, Gtk::BUTTONS_OK, false);
                errorDialog->set_secondary_text("Please select a folder that contains: full_model.h, model.c, and include/model.h.");
                errorDialog->set_modal(true);
                errorDialog->set_position(Gtk::WIN_POS_CENTER);
                errorDialog->signal_response().connect([errorDialog](int)
                {
                    errorDialog->hide();
                    delete errorDialog;
                });
                errorDialog->show_all();
            }
        });

        dialog->show_all();
    }
}
